version: "3.9"

x-restart-policy: &restart_policy
  restart: unless-stopped

x-project-defaults: &project_defaults
  <<: *restart_policy
  networks:
    - geocam_nw
  env_file: .env

services:
  traefik:
    <<: *project_defaults
    image: ${TRAEFIK_IMAGE:-traefik:v2.6}
    depends_on:
      frontend:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  api:
    <<: *project_defaults
    image: ${API_IMAGE:-registry.gitlab.com/natural-solutions/geonature/annotation:api-dev}
    build:
      context: ../api
      dockerfile: Dockerfile
      target: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/openapi.json"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=${TRAEFIK_ROUTER_RULE_API:-PathPrefix(`/api/v1`)}
      - traefik.http.routers.api.entrypoints=web
      - traefik.http.routers.api.middlewares=api-stripprefix
      - traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=${API_ROOT_PATH:-/api/v1}
    environment:
      - KEYCLOAK_ADMIN_CLIENT_SECRET=${KEYCLOAK_ADMIN_CLIENT_SECRET}
      - KEYCLOAK_CALLBACK_URI=${KEYCLOAK_CALLBACK_URI:-http://api:8000/callback}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID:-geonature-annotation}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM:-geonature-annotation}
      - KEYCLOAK_SERVER_URL=${KEYCLOAK_SERVER_URL:-http://keycloak:8080/auth}
      - KEYCLOAK_TOKEN_URI=${KEYCLOAK_TOKEN_URI}

  deepfaune:
    <<: *project_defaults
    build:
      context: ../deepfaune
      dockerfile: Dockerfile
      target: development
    depends_on:
      broker:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.deepfaune.rule=PathPrefix(`/deepfaune`)
      - traefik.http.routers.deepfaune.entrypoints=web
      - traefik.http.routers.deepfaune.middlewares=api-stripprefix
      - traefik.http.middlewares.deepfaune-stripprefix.stripprefix.prefixes=/deepfaune

  broker:
    <<: *project_defaults
    image: redis:7-alpine
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PWD}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes: 
      - broker:/data

  taxapi:
    <<: *project_defaults
    image: ${TAXAPI_IMAGE:-registry.gitlab.com/natural-solutions/geonature/taxapi:taxapi-latest}
    labels:
      - traefik.enable=true
      - traefik.http.routers.taxapi.rule=${TRAEFIK_ROUTER_RULE_TAXAPI:-PathPrefix(`/taxapi`)}
      - traefik.http.routers.taxapi.entrypoints=web
    environment:
      - TAXREF_FILE=${TAXAPI_TAXREF_FILE:-TAXREF_v16_2022.zip}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5666/taxapi/V1/healthcheck"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s

  frontend:
    <<: *project_defaults
    image: ${FRONTEND_IMAGE:-registry.gitlab.com/natural-solutions/geonature/annotation:frontend-dev}
    build:
      context: ../frontend
      dockerfile: Dockerfile
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=${TRAEFIK_ROUTER_RULE_FRONTEND:-PathPrefix(`/`)}
      - traefik.http.routers.frontend.entrypoints=web
    environment:
      - REACT_APP_KEYCLOAK_CLIENT_URL=${KEYCLOAK_CLIENT_URL:-http://localhost:8888/auth}
      - REACT_APP_KEYCLOAK_CLIENT_REALM=${KEYCLOAK_REALM_ID:-geonature-annotation}
      - REACT_APP_KEYCLOAK_CLIENT_CLIENT_ID=${KEYCLOAK_CLIENT_CLIENT_ID:-frontend}

  db:
    <<: *project_defaults
    image: ${DB_IMAGE:-postgres:14-alpine}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER-dbuser} -d ${DB_NAME-annotation} -h 127.0.0.1",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dbpassword}
      POSTGRES_DB: ${DB_NAME:-annotation}
      POSTGRES_USER: ${DB_USER:-dbuser}

  keycloak:
    <<: *project_defaults
    image: ${KEYCLOAK_IMAGE:-registry.gitlab.com/natural-solutions/geonature/annotation:keycloak-dev}
    build:
      context: ../keycloak
    command: start-dev --import-realm
    healthcheck:
      # https://github.com/keycloak/keycloak/issues/17273#issuecomment-1693549331
      test: cat /proc/net/tcp | grep '00000000:1F90 00000000:0000' || exit 1
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 80s
    depends_on:
      db:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak.rule=${TRAEFIK_ROUTER_RULE_KEYCLOAK:-PathPrefix(`/auth`)}
      - traefik.http.routers.keycloak.entrypoints=web

  minio:
    <<: *project_defaults
    image: ${MINIO_IMAGE:-minio/minio:RELEASE.2023-08-23T10-07-06Z}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    command: server --console-address :9001 /data
    labels:
      - traefik.enable=true
      - traefik.http.routers.minio.rule=${TRAEFIK_ROUTER_RULE_MINIO:-PathPrefix(`/miniobucket`)}

volumes:
  db_data:
  minio_data:
  broker:


networks:
  geocam_nw:
    external: false